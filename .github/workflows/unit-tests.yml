# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python tests & Sonar

on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          coverage run -m pytest
          coverage xml
          pwd
          find . -name "*coverage.xml*"
      - name: Test coverage report upload
        uses: actions/upload-artifact@v3
        with:
          name: coverage.xml
          path: coverage.xml
          retention-days: 1


  sonarcloud:
    needs: test
    runs-on: ubuntu-latest
    environment: sonar
    steps:
      - uses: actions/checkout@v3
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
      - name: Download test coverage report
        uses: actions/download-artifact@v3
        with:
          name: coverage.xml
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.python.coverage.reportPaths=/coverage.xml
            -Dsonar.test.exclusions=tests/**
            -Dsonar.python.version=3.11
        env:
          GITHUB_TOKEN: ${{ secrets.VCS_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          sonar.projectKey: ${{ env.SONAR_KEY }}
          sonar.organization: ${{ env.SONAR_ORG }}